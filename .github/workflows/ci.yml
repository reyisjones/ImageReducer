name: CI - Tests and Validation

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    name: Run Tests
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        
    - name: Run system validation
      run: |
        python -m pytest tests/ -v --tb=short
        
    - name: Run tests with coverage
      run: |
        python -m pytest tests/ --cov=. --cov-report=xml --cov-report=html --cov-report=term
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Archive coverage results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: htmlcov/
        
  lint:
    name: Code Quality Check
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint
        
    - name: Run flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
      
  build-test:
    name: Test Build Process
    runs-on: windows-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-build.txt
        
    - name: Build executable with PyInstaller
      run: |
        python -m PyInstaller --name=ImageCompressor --onefile --windowed --clean image_compressor_gui.py
        
    - name: Verify build output
      run: |
        if (Test-Path "dist\ImageCompressor.exe") {
          Write-Host "âœ“ Executable built successfully"
          $size = (Get-Item "dist\ImageCompressor.exe").Length / 1MB
          Write-Host "Size: $([math]::Round($size, 2)) MB"
        } else {
          Write-Error "Build failed - executable not found"
          exit 1
        }
        
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ImageCompressor-Executable-${{ github.sha }}
        path: dist/ImageCompressor.exe
        retention-days: 7
